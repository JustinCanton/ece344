#ifndef _VM_H_
#define _VM_H_

#include <machine/vm.h>

/*
 * VM system-related definitions.
 *
 * You'll probably want to add stuff here.
 */

/* Fault-type arguments to vm_fault() */
#define FIXED 		0    /* State = 0 means Fixed */
#define FREE     	1    /* State = 1 means Free */
#define CLEAN    	2    /* State = 2 means Clean */
#define DIRTY    	3    /* State = 3 means Dirty */

/* Coremap structure */
struct coremap_struct {
    /* where is paged mapped to */
    struct addrspace* as;
    vaddr_t va;
    paddr_t pa;

    /* page state */
    int state;

    int start_of_group;
    /* other info for paging algorithm  */
};

/* Fault-type arguments to vm_fault() */
#define VM_FAULT_READ        0    /* A read was attempted */
#define VM_FAULT_WRITE       1    /* A write was attempted */
#define VM_FAULT_READONLY    2    /* A write to a readonly page was attempted*/


/* Initialization function */
void vm_bootstrap(void);

/* Fault handling function called by trap code */
int vm_fault(int faulttype, vaddr_t faultaddress);

/* Allocate/free kernel heap pages (called by kmalloc/kfree) */
vaddr_t alloc_kpages(int npages);
void free_kpages(vaddr_t addr);

/* Get the kernel heap pages */
static paddr_t getppages(unsigned long npages);

#endif /* _VM_H_ */
